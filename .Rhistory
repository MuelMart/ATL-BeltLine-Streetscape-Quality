st_as_sf() %>%
#Convert to points
st_cast(to = "POINT") %>%
#Reappend OSM IDs
st_join(street_segments %>% st_buffer(set_units(1,'meter')), st_intersects)
View(street_points)
View(street_segments)
View(street_edges)
View(osm_streets)
View(street_edges)
street_segments <- osm_streets %>%
select(c(osm_id, geometry)) %>%
st_filter(ap %>% st_buffer(buffer), .predicate = st_intersects)
View(street_segments)
tm_shape(street_segments) +
tm_lines() +
tm_shape(beltline) +
tm_lines(col = 'red', lwd = 2) +
tm_shape(ap) +
tm_dots(size = .05) +
tm_layout(main.title = 'BeltLine Access Point Streets')
#Now we want the points on each street segment that are closest to the beltline.
street_points <- street_segments %>%
#Breakup lines into segments
st_line_sample(density = 1/10) %>%
st_as_sf() %>%
#Convert to points
st_cast(to = "POINT") %>%
#Reappend OSM IDs
st_join(street_segments %>% st_buffer(set_units(1,'meter')), st_intersects)
View(street_points)
View(street_points)
View(street_segments)
View(street_points)
#Now clean the road networks to just those that intersect with the access points
street_segments <- osm_streets %>%
select(c(osm_id, geometry)) %>%
st_join(ap %>% st_buffer(buffer), st_intersects)
View(street_segments)
#Now clean the road networks to just those that intersect with the access points
street_segments <- osm_streets %>%
select(c(osm_id, geometry)) %>%
st_join(ap %>% st_buffer(buffer), st_intersects) %>%
filter(!is.na(OBJECTID))
View(street_segments)
#Now we want the points on each street segment that are closest to the beltline.
street_points <- street_segments %>%
#Breakup lines into segments
st_line_sample(density = 1/10) %>%
st_as_sf() %>%
#Convert to points
st_cast(to = "POINT") %>%
#Reappend OSM IDs
st_join(street_segments %>% st_buffer(set_units(1,'meter')), st_intersects)
View(street_points)
?st_intersection
?st_distance
street_nearest_ap %>%
street_points %>%
st_drop_geometry %>%
left_join(ap, by = 'OBJECTID')
#Now we want the points on each street segment that are closest to the beltline.
street_points <- street_segments %>%
#Breakup lines into segments
st_line_sample(density = 1/10) %>%
st_as_sf() %>%
#Convert to points
st_cast(to = "POINT") %>%
#Reappend OSM IDs
st_join(street_segments %>% st_buffer(set_units(1,'meter')), st_intersects)
street_nearest_ap %>%
street_points %>%
st_drop_geometry %>%
left_join(ap, by = 'OBJECTID')
street_nearest_ap <- street_points %>%
st_drop_geometry() %>%
left_join(ap, by = 'OBJECTID')
View(street_nearest_ap)
?st_union
?st_union
#Now unionize these two geometries into a multipoint, then get the distance.
ap_union <- street_points %>%
st_union(street_neareast_ap)
street_nearest_ap <- street_points %>%
st_drop_geometry() %>%
left_join(ap, by = 'OBJECTID')
#Now unionize these two geometries into a multipoint, then get the distance.
ap_union <- street_points %>%
st_union(street_neareast_ap)
street_nearest_ap <- street_points %>%
st_drop_geometry() %>%
left_join(ap, by = 'OBJECTID')
#Now unionize these two geometries into a multipoint, then get the distance.
ap_union <- street_points %>%
st_union(street_nearest_ap)
#Now we want the points on each street segment that are closest to the beltline.
street_points <- street_segments %>%
#Breakup lines into segments
st_line_sample(density = 1/10) %>%
st_as_sf() %>%
#Convert to points
st_cast(to = "POINT") %>%
#Reappend OSM IDs
st_join(street_segments %>% st_buffer(set_units(1,'meter')), st_intersects) %>%
st_transform(epsg_id)
#Now get the nearest access point to each street
street_nearest_ap <- street_points %>%
st_drop_geometry() %>%
left_join(ap, by = 'OBJECTID') %>%
st_transform(epsg_id)
#Now we want the points on each street segment that are closest to the beltline.
street_points <- street_segments %>%
#Breakup lines into segments
st_line_sample(density = 1/10) %>%
st_as_sf() %>%
#Convert to points
st_cast(to = "POINT") %>%
#Reappend OSM IDs
st_join(street_segments %>% st_buffer(set_units(1,'meter')), st_intersects) %>%
st_transform(epsg_id)
#Now get the nearest access point to each street
street_nearest_ap <- street_points %>%
st_drop_geometry() %>%
left_join(ap, by = 'OBJECTID') %>%
st_as_sf() %>%
st_transform(epsg_id)
#Now unionize these two geometries into a multipoint, then get the distance.
ap_union <- street_points %>%
st_union(street_nearest_ap)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tidycensus)
library(sf)
library(tmap)
library(reticulate)
library(units)
library(osmdata)
library(sfnetworks)
library(tidygraph)
#Set tmap options
tmap_options(basemaps = "https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png",
main.title.size = 0.8,
main.title.fontface = 'bold')
#All geographic analysis will use the NAD83 / Georgia West Projected Coordinate System
epsg_id <- 26967
#Read in raw dataframe of coordinate points
ap_raw <- read_csv('./data/beltline_points.csv')
#Convert the spreadsheet to an SF object
ap  <- ap_raw %>%
st_as_sf(coords = c('latitude', 'longitude'), crs = 4326) %>%
st_transform(epsg_id)
#Read in Atlanta BeltLine Shapefile
beltline <- st_read('./data/BeltLine_Trails.shp') %>%
st_transform(epsg_id)
#Plot accesspoints relative to BeltLine
tmap_mode('view')
tm_shape(beltline) +
tm_lines(lwd = 2, col = '#00820d', lty = 'dashed') +
tm_shape(ap) +
tm_dots(alpha = 0.75)
#Establish a buffer length for analysis
buffer <- set_units(20, 'meters')
#Set bounding box of the search area
bl_bbox <- st_bbox(beltline %>%
st_buffer(dist = set_units(1, 'mile')) %>%
st_transform(crs = 4326))
#Read in OSM street data for streets within the bounding box
osm_raw <- opq(bbox = bl_bbox) %>%
add_osm_feature(key = 'highway', value = c('motorway', 'trunk', 'primary', 'secondary', 'tertiary', 'unclassified','residential')) %>%
osmdata_sf() %>%
osm_poly2line()
#Get the street SF object
osm_streets <- osm_raw$osm_lines %>%
st_transform(epsg_id) %>%
filter(!is.na(osm_id))
#Convert to SF Network, and clean the edges
street_net <- osm_streets %>%
as_sfnetwork(directed = FALSE)
street_edges <- street_net %>%
activate('edges') %>%
mutate('length' = edge_length()) %>%
filter(!edge_is_multiple()) %>%
filter(!edge_is_loop()) %>%
convert(to_spatial_subdivision) %>%
convert(to_spatial_smooth) %>%
mutate('length' = edge_length() %>% unclass()) %>%
st_as_sf()
#Plot road networks
tmap_mode('view')
tm_shape(street_edges) +
tm_lines() +
tm_shape(beltline) +
tm_lines(col = 'red', lwd = 2) +
tm_layout(main.title = 'BeltLine and Surrounding Streets')
#Now clean the road networks to just those that intersect with the access points
street_segments <- street_edges %>%
select(c(osm_id, geometry)) %>%
st_join(ap %>% st_buffer(buffer), st_intersects) %>%
filter(!is.na(OBJECTID))
tmap_mode('plot')
tm_shape(street_segments) +
tm_lines() +
tm_shape(beltline) +
tm_lines(col = 'red', lwd = 2) +
tm_shape(ap) +
tm_dots(size = .05) +
tm_layout(main.title = 'BeltLine Access Point Streets')
#Now we want the points on each street segment that are closest to the beltline.
street_points <- street_segments %>%
#Breakup lines into segments
st_line_sample(density = 1/10) %>%
st_as_sf() %>%
#Convert to points
st_cast(to = "POINT") %>%
#Reappend OSM IDs
st_join(street_segments %>% st_buffer(set_units(1,'meter')), st_intersects) %>%
st_transform(epsg_id)
#Now we need to get the access point geometry that corresponds to each street segment
street_nearest_ap <- street_points %>%
st_drop_geometry() %>%
left_join(ap, by = 'OBJECTID') %>%
st_as_sf() %>%
st_transform(epsg_id)
ap_closest <- street_points %>%
#Create a line geometry of each road point to its corresponding access point.
st_nearest_points(street_nearest_ap, pairwise = TRUE) %>%
st_as_sf() %>%
#Calculate the distance of each road point to the access point
mutate(length = st_length(.) %>% unclass()) %>%
st_drop_geometry() %>%
bind_cols(street_points) %>%
#Find the 3 closest points to each access point
group_by(OBJECTID) %>%
arrange(length) %>%
slice(1:3) %>%
st_as_sf(crs = epsg_id)
#Function for getting the azimuth towards the beltline
get_azi <- function(point, o_id, unit = 10){
#Get the beltline access point
b <- ap %>%
filter(o_id == OBJECTID)
#Get a point x meters down from the beltline
a <- point
#Calculate the azimuth and return it
y1 <- a %>% st_coordinates() %>% .[,'Y']
y2 <- b %>% st_coordinates() %>% .[,'Y']
x1 <- a %>% st_coordinates() %>% .[,'X']
x2 <- b %>% st_coordinates() %>% .[,'X']
azi <- atan2(y1 - y2, x1 - x2) * (180/pi)
return(azi)
}
#Vectorize the azimuth function
get_azi_V <- Vectorize(get_azi)
#Function for getting the coordinates for imagery
get_gsv_coord <- function(point, unit = 10, epsg = 4326){
pt <- point %>%
st_transform(crs = epsg) %>%
st_coordinates()
coords <- paste0(pt[,'Y'] %>% round(4), ',', pt[,'X'] %>% round(4))
return(coords)
}
key <- Sys.getenv('gsv_api')
gsv_prepped <- ap_closest %>%
#Append the azimuth for the closest point to the beltline access point
mutate(azi = get_azi_V(point = `geometry`, o_id = `OBJECTID`, unit = 10) %>% round(1)) %>%
#Prep the coordinates for the API call
mutate(coord = get_gsv_coord(geometry)) %>%
#Craft URL
mutate(furl = glue::glue("https://maps.googleapis.com/maps/api/streetview?size=640x640&location={coord}&heading={azi}&fov=90&pitch=0&key={key}"))
View(gsv_prepped)
gsv_prepped <- ap_closest %>%
#Append the azimuth for the closest point to the beltline access point
mutate(azi = get_azi_V(point = `geometry`, o_id = `OBJECTID`, unit = 10) %>% round(1)) %>%
#Prep the coordinates for the API call
mutate(coord = get_gsv_coord(geometry)) %>%
#Craft URL
mutate(furl = glue::glue("https://maps.googleapis.com/maps/api/streetview?size=640x640&location={coord}&heading={azi}&fov=90&pitch=0&key={key}")) %>%
mutate(path = paste0(fpath,furl))
View(gsv_prepped)
key <- Sys.getenv('gsv_api')
fpath <- './image exports/'
gsv_prepped <- ap_closest %>%
#Append the azimuth for the closest point to the beltline access point
mutate(azi = get_azi_V(point = `geometry`, o_id = `OBJECTID`, unit = 10) %>% round(1)) %>%
#Prep the coordinates for the API call
mutate(coord = get_gsv_coord(geometry)) %>%
#Craft URL
mutate(furl = glue::glue("https://maps.googleapis.com/maps/api/streetview?size=640x640&location={coord}&heading={azi}&fov=90&pitch=0&key={key}")) %>%
mutate(path = paste0(fpath,furl))
View(gsv_prepped)
?file.exists
for obs in gsv_prepped{
for (obs in gsv_prepped){
if(!file.exists(obs$path)){
download.file(obs$furl, obs$path, mode = 'wb')
}
}
for (obs in gsv_prepped){
return(obs)
#if(!file.exists(obs$path)){
#  download.file(obs$furl, obs$path, mode = 'wb')
#}
}
for (obs in gsv_prepped){
print(obs)
#if(!file.exists(obs$path)){
#  download.file(obs$furl, obs$path, mode = 'wb')
#}
}
for (i in 1:5){
obs <- gsv_prepped[i,]
if(!file.exists(obs$path)){
download.file(obs$furl, obs$path, mode = 'wb')
}
}
View(obs)
?download.file
gsv_prepped <- ap_closest %>%
#Append the azimuth for the closest point to the beltline access point
mutate(azi = get_azi_V(point = `geometry`, o_id = `OBJECTID`, unit = 10) %>% round(1)) %>%
#Prep the coordinates for the API call
mutate(coord = get_gsv_coord(geometry)) %>%
#Craft URL
mutate(furl = glue::glue("https://maps.googleapis.com/maps/api/streetview?size=640x640&location={coord}&heading={azi}&fov=90&pitch=0&key={key}")) %>%
mutate(path = paste0('./export images', paste0(`OBJECTID`,'_',`coord`), '.jpg')))
gsv_prepped <- ap_closest %>%
#Append the azimuth for the closest point to the beltline access point
mutate(azi = get_azi_V(point = `geometry`, o_id = `OBJECTID`, unit = 10) %>% round(1)) %>%
#Prep the coordinates for the API call
mutate(coord = get_gsv_coord(geometry)) %>%
#Craft URL
mutate(furl = glue::glue("https://maps.googleapis.com/maps/api/streetview?size=640x640&location={coord}&heading={azi}&fov=90&pitch=0&key={key}")) %>%
mutate(path = paste0('./export images', paste0(`OBJECTID`,'_',`coord`), '.jpg'))
View(gsv_prepped)
gsv_prepped <- ap_closest %>%
#Append the azimuth for the closest point to the beltline access point
mutate(azi = get_azi_V(point = `geometry`, o_id = `OBJECTID`, unit = 10) %>% round(1)) %>%
#Prep the coordinates for the API call
mutate(coord = get_gsv_coord(geometry)) %>%
#Craft URL
mutate(furl = glue::glue("https://maps.googleapis.com/maps/api/streetview?size=640x640&location={coord}&heading={azi}&fov=90&pitch=0&key={key}")) %>%
mutate(path = paste0('./export images/', paste0(`OBJECTID`,'_',`coord`), '.jpg'))
View(gsv_prepped)
gsv_prepped <- ap_closest %>%
#Append the azimuth for the closest point to the beltline access point
mutate(azi = get_azi_V(point = `geometry`, o_id = `OBJECTID`, unit = 10) %>% round(1)) %>%
#Prep the coordinates for the API call
mutate(coord = get_gsv_coord(geometry)) %>%
#Craft URL
mutate(furl = glue::glue("https://maps.googleapis.com/maps/api/streetview?size=640x640&location={coord}&heading={azi}&fov=90&pitch=0&key={key}")) %>%
mutate(path = paste0('./export images/', paste0(`OBJECTID`,'_',str_replace(`coord`,',','_')), '.jpg'))
View(gsv_prepped)
for (i in 1:5){
obs <- gsv_prepped[i,]
if(!file.exists(obs$path)){
download.file(obs$furl, obs$path, mode = 'wb')
}
}
View(gsv_prepped)
download.file('https://maps.googleapis.com/maps/api/streetview?size=640x640&location=33.7819,-84.3686&heading=157.1&fov=90&pitch=0&key=AIzaSyBQIcCyMcWjdRgP8IBM9kjiR75jelCAsDw
', './export images/3_33.7938_-84.3704.jpg', mode = 'wb'
)
gsv_prepped <- ap_closest %>%
#Append the azimuth for the closest point to the beltline access point
mutate(azi = get_azi_V(point = `geometry`, o_id = `OBJECTID`, unit = 10) %>% round(1)) %>%
#Prep the coordinates for the API call
mutate(coord = get_gsv_coord(geometry)) %>%
#Craft URL
mutate(furl = glue::glue("https://maps.googleapis.com/maps/api/streetview?size=640x640&location={coord}&heading={azi}&fov=90&pitch=0&key={key}")) %>%
mutate(path = paste0('./image exports/', paste0(`OBJECTID`,'_',str_replace(`coord`,',','_')), '.jpg'))
download.file('https://maps.googleapis.com/maps/api/streetview?size=640x640&location=33.7819,-84.3686&heading=157.1&fov=90&pitch=0&key=AIzaSyBQIcCyMcWjdRgP8IBM9kjiR75jelCAsDw
', './image exports/3_33.7938_-84.3704.jpg', mode = 'wb'
)
download.file('https://maps.googleapis.com/maps/api/streetview?size=640x640&location=33.7819,-84.3686&heading=157.1&fov=90&pitch=0&key=AIzaSyBQIcCyMcWjdRgP8IBM9kjiR75jelCAsDw', './image exports/3_33.7938_-84.3704.jpg', mode = 'wb'
)
for (i in 1:5){
obs <- gsv_prepped[i,]
if(!file.exists(obs$path)){
download.file(obs$furl, obs$path, mode = 'wb')
}
}
for (i in 1:nrow(gsv_prepped)){
obs <- gsv_prepped[i,]
if(!file.exists(obs$path)){
download.file(obs$furl, obs$path, mode = 'wb')
}
}
e<-list.files('./image exports')
View(gsv_prepped)
View(gsv_prepped)
c <- gsv_prepped %>% st_drop_geometry() %>% count(furl)
View(c)
c <- gsv_prepped %>% st_drop_geometry() %>% count(path)
View(c)
reticulate::repl_python()
# Install PyTorch
!pip install torch==1.12.0 torchvision --extra-index-url https://download.pytorch.org/whl/cu113
# Install MMCV
!pip install openmim
!mim install mmcv-full==1.6.0
# Clone from git
!rm -rf mmsegmentation
!git clone https://github.com/open-mmlab/mmsegmentation.git
%cd mmsegmentation
!pip install -e .
quit
imagery_raw <- read_csv('./data/seg_output.csv')
View(imagery_raw)
View(gsv_prepped)
node_key <- gsv_prepped %>%
st_drop_geometry() %>%
count(path)
View(node_key)
node_key <- gsv_prepped %>%
ungroup() %>%
st_drop_geometry() %>%
count(path)
View(node_key)
node_key <- gsv_prepped %>%
st_drop_geometry() %>%
count(path) %>%
mutate(node_id = 1:nrow(.))
node_key <- gsv_prepped %>%
st_drop_geometry() %>%
count(path) %>%
mutate(node_id = 1:nrow(gsv_prepped))
node_key <- gsv_prepped %>%
st_drop_geometry() %>%
count(path) %>%
mutate(node_id = 1:nrow(.))
node_key <- gsv_prepped %>%
st_drop_geometry() %>%
count(path) %>%
mutate(node_id = nrow(.))
node_key <- gsv_prepped %>%
st_drop_geometry() %>%
count(path) %>%
mutate(node_id = row_number(.))
node_key <- gsv_prepped %>%
st_drop_geometry() %>%
count(path) %>%
mutate(node_id = row_number())
View(node_key)
node_key <- gsv_prepped %>%
st_drop_geometry() %>%
count(path) %>%
mutate(node_id = row_number()) %>%
select(-c(n, path))
imagery_raw <- read_csv('./data/seg_output.csv')
imagery <- imagery_raw %>%
left_join(node_key, by = 'node_id')
View(imagery)
node_key <- gsv_prepped %>%
st_drop_geometry() %>%
count(path) %>%
mutate(node_id = row_number()) %>%
select(-c(n, path)) %>%
ungroup()
imagery_raw <- read_csv('./data/seg_output.csv')
imagery <- imagery_raw %>%
left_join(node_key, by = 'node_id')
View(imagery_raw)
View(imagery_raw)
imagery_raw <- read_csv('./data/seg_output.csv') %>%
mutate(node_id = row_number)
imagery_raw <- read_csv('./data/seg_output.csv') %>%
mutate(node_id = row_number())
imagery <- imagery_raw %>%
left_join(node_key, by = 'node_id')
View(imagery)
imagery_raw <- read_csv('./data/seg_output.csv')
imagery <- imagery_raw %>%
left_join(node_key, by = 'node_id')
View(imagery)
View(imagery_raw)
knitr::opts_chunk$set(echo = TRUE)
#Read in Atlanta BeltLine Shapefile
beltline <- st_read('./data/BeltLine_Trails.shp') %>%
st_transform(epsg_id)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tidycensus)
library(sf)
library(tmap)
library(reticulate)
library(units)
library(osmdata)
library(sfnetworks)
library(tidygraph)
#Set tmap options
tmap_options(basemaps = "https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png",
main.title.size = 0.8,
main.title.fontface = 'bold')
epsg_id <- 26967
#Read in raw dataframe of coordinate points
ap_raw <- read_csv('./data/beltline_points.csv')
#Convert the spreadsheet to an SF object
ap  <- ap_raw %>%
st_as_sf(coords = c('latitude', 'longitude'), crs = 4326) %>%
st_transform(epsg_id)
#Read in Atlanta BeltLine Shapefile
beltline <- st_read('./data/BeltLine_Trails.shp') %>%
st_transform(epsg_id)
beltline <- st_read('./data/BeltLine_Trails.shp')
#Read in Atlanta BeltLine Shapefile
beltline <- st_read('./data/BeltLine_Trails.shp') %>%
st_transform(epsg_id)
st_drivers()
#Read in Atlanta BeltLine Shapefile
beltline <- st_read('./data/BeltLine_Trails.shp') %>%
st_transform(epsg_id)
knit_with_parameters("C:/Users/Sam/OneDrive - Georgia Institute of Technology/Intro to Urban Analytics/Final Project/Data Prep.Rmd")
