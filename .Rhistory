line_sample$dist_170
line_sample$dist..170.
line_sample %>% as.matrix()
str(line_sample)
line_sample <- lines %>%
st_line_sample(density = 1/10) %>%
st_as_sf() %>%
st_cast("POINT")
View(line_sample)
View(lines)
View(ap_streets)
View(street_segments)
View(street_net)
#Establish a buffer length for analysis
buffer <- set_units(20, 'meters')
#Set bounding box of the search area
bl_bbox <- st_bbox(beltline %>%
st_buffer(dist = set_units(1, 'mile')) %>%
st_transform(crs = 4326))
#Read in OSM street data for streets within the bounding box
osm_raw <- opq(bbox = bl_bbox) %>%
add_osm_feature(key = 'highway', value = c('motorway', 'trunk', 'primary', 'secondary', 'tertiary', 'unclassified','residential')) %>%
osmdata_sf() %>%
osm_poly2line()
#Get the street SF object
osm_streets <- osm_raw$osm_lines %>%
st_transform(epsg_id)
#Convert to SF Network, and clean the edges
street_net <- osm_streets %>%
as_sfnetwork(directed = FALSE) %>%
activate('edges') %>%
mutate('length' = edge_length()) %>%
filter(!edge_is_multiple()) %>%
filter(!edge_is_loop()) %>%
convert(to_spatial_subdivision) %>%
convert(to_spatial_smooth) %>%
mutate('length' = edge_length() %>% unclass()) %>%
st_as_sf()
#Plot road networks
tmap_mode('view')
tm_shape(street_net) +
tm_lines() +
tm_shape(beltline) +
tm_lines(col = 'red', lwd = 2) +
tm_layout(main.title = 'BeltLine and Surrounding Streets')
View(street_segments)
#Find the point on the line nearest the beltline access point
yield_closest_point <- function(line, dest_point, unit = 10, closest = 1){
#Sample the line and get the distance of each point from the access point of interest
line_sample <- line %>%
#Sample the line and convert to sf points.
#Re-project the points to match the CRS of the destination point
st_line_sample(density = 1/unit) %>%
st_as_sf() %>%
st_cast(to = "POINT") %>%
#Calculate the distance of each point on the line to the destination point
mutate(dist = st_distance(.,dest_point) %>% unclass()) %>%
#Select the point with the shortest distance and return it.
arrange(dist) %>%
.[1]
return(line_sample)
}
#Function for getting the azimuth towards the beltline
get_azi <- function(line, o_id, unit = 10){
#Get the list of points on the beltline
b <- ap %>%
filter(o_id == OBJECTID)
#Get a point x meters down from the beltline
a <- yield_closest_point(line, b, unit)
#Calculate the azimuth and return it
y1 <- a %>% st_coordinates() %>% .[,'Y']
y2 <- b %>% st_coordinates() %>% .[,'Y']
x1 <- a %>% st_coordinates() %>% .[,'X']
x2 <- b %>% st_coordinates() %>% .[,'X']
azi <- atan2(y1 - y2, x1 - x2) * (180/pi)
return(azi)
}
#Function for getting the coordinates for imagery
get_gsv_coord <- function(line, unit = 10, epsg = 4326){
pt <- st_line_sample(line, density = 1/unit) %>%
st_as_sf() %>%
st_cast(to = "POINT") %>%
st_transform(crs = epsg) %>%
.[1,] %>%
st_coordinates()
coords <- paste0(pt[,'Y'] %>% round(4), ',', pt[,'X'] %>% round(4))
return(coords)
}
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tidycensus)
library(sf)
library(tmap)
library(reticulate)
library(units)
library(osmdata)
library(sfnetworks)
library(tidygraph)
#Set tmap options
tmap_options(basemaps = "https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png",
main.title.size = 0.8,
main.title.fontface = 'bold')
#All geographic analysis will use the NAD83 / Georgia West Projected Coordinate System
epsg_id <- 26967
#Read in raw dataframe of coordinate points
ap_raw <- read_csv('./data/beltline_points.csv')
#Convert the spreadsheet to an SF object
ap  <- ap_raw %>%
st_as_sf(coords = c('latitude', 'longitude'), crs = 4326) %>%
st_transform(epsg_id)
#Read in Atlanta BeltLine Shapefile
beltline <- st_read('./data/BeltLine_Trails.shp') %>%
st_transform(epsg_id)
#Plot accesspoints relative to BeltLine
tmap_mode('view')
tm_shape(beltline) +
tm_lines(lwd = 2, col = '#00820d', lty = 'dashed') +
tm_shape(ap) +
tm_dots(alpha = 0.75)
#Establish a buffer length for analysis
buffer <- set_units(20, 'meters')
#Set bounding box of the search area
bl_bbox <- st_bbox(beltline %>%
st_buffer(dist = set_units(1, 'mile')) %>%
st_transform(crs = 4326))
#Read in OSM street data for streets within the bounding box
osm_raw <- opq(bbox = bl_bbox) %>%
add_osm_feature(key = 'highway', value = c('motorway', 'trunk', 'primary', 'secondary', 'tertiary', 'unclassified','residential')) %>%
osmdata_sf() %>%
osm_poly2line()
#Get the street SF object
osm_streets <- osm_raw$osm_lines %>%
st_transform(epsg_id)
#Convert to SF Network, and clean the edges
street_net <- osm_streets %>%
as_sfnetwork(directed = FALSE) %>%
activate('edges') %>%
mutate('length' = edge_length()) %>%
filter(!edge_is_multiple()) %>%
filter(!edge_is_loop()) %>%
convert(to_spatial_subdivision) %>%
convert(to_spatial_smooth) %>%
mutate('length' = edge_length() %>% unclass()) %>%
st_as_sf()
#Plot road networks
tmap_mode('view')
tm_shape(street_net) +
tm_lines() +
tm_shape(beltline) +
tm_lines(col = 'red', lwd = 2) +
tm_layout(main.title = 'BeltLine and Surrounding Streets')
#Now clean the road networks to just those that intersect with the access points
street_segments <- street_net %>%
select(c(osm_id, geometry)) %>%
st_filter(ap %>% st_buffer(buffer), .predicate = st_intersects)
tmap_mode('plot')
tm_shape(street_segments) +
tm_lines() +
tm_shape(beltline) +
tm_lines(col = 'red', lwd = 2) +
tm_shape(ap) +
tm_dots(size = .05) +
tm_layout(main.title = 'BeltLine Access Point Streets')
View(street_segments)
#Get the street segments that intersect with the access points
ap_streets <- street_segments %>%
st_join(ap %>% st_buffer(buffer), st_intersects)
View(ap_streets)
View(ap_streets)
funcy(ap_streets$geometry, ap_streets$OBJECTID)
#Get the street segments that intersect with the access points
ap_streets <- street_segments %>%
st_join(ap %>% st_buffer(buffer), st_intersects)
funcy <- function(lines, obids){
points <- obids %>% left_join(ap, by = c(str(obids) = 'OBJECTID'))
#Get the street segments that intersect with the access points
ap_streets <- street_segments %>%
st_join(ap %>% st_buffer(buffer), st_intersects)
funcy <- function(lines, obids){
points <- obids %>%
left_join(ap, by = c(str(obids) = 'OBJECTID'))
left_join()
left_join(ap_streets$OBJECTID, ap, by = 'OBJECTID')
View(street_segments)
View(street_net)
street_net %>%
activate('nodes')
street_net %>% class()
#Establish a buffer length for analysis
buffer <- set_units(20, 'meters')
#Set bounding box of the search area
bl_bbox <- st_bbox(beltline %>%
st_buffer(dist = set_units(1, 'mile')) %>%
st_transform(crs = 4326))
#Read in OSM street data for streets within the bounding box
osm_raw <- opq(bbox = bl_bbox) %>%
add_osm_feature(key = 'highway', value = c('motorway', 'trunk', 'primary', 'secondary', 'tertiary', 'unclassified','residential')) %>%
osmdata_sf() %>%
osm_poly2line()
#Get the street SF object
osm_streets <- osm_raw$osm_lines %>%
st_transform(epsg_id)
#Convert to SF Network, and clean the edges
street_net <- osm_streets %>%
as_sfnetwork(directed = FALSE)
street_edges <- street_net %>%
activate('edges') %>%
mutate('length' = edge_length()) %>%
filter(!edge_is_multiple()) %>%
filter(!edge_is_loop()) %>%
convert(to_spatial_subdivision) %>%
convert(to_spatial_smooth) %>%
mutate('length' = edge_length() %>% unclass()) %>%
st_as_sf()
#Plot road networks
tmap_mode('view')
tm_shape(street_edges) +
tm_lines() +
tm_shape(beltline) +
tm_lines(col = 'red', lwd = 2) +
tm_layout(main.title = 'BeltLine and Surrounding Streets')
#Now clean the road networks to just those that intersect with the access points
street_segments <- street_edges %>%
select(c(osm_id, geometry)) %>%
st_filter(ap %>% st_buffer(buffer), .predicate = st_intersects)
tmap_mode('plot')
tm_shape(street_segments) +
tm_lines() +
tm_shape(beltline) +
tm_lines(col = 'red', lwd = 2) +
tm_shape(ap) +
tm_dots(size = .05) +
tm_layout(main.title = 'BeltLine Access Point Streets')
View(street_segments)
#Now we want the points on each street segment that are closest to the beltline.
street_segments %>%
st_line_sample(density = 1/10)
#Now we want the points on each street segment that are closest to the beltline.
street_points <- street_segments %>%
st_line_sample(density = 1/10)
#Now we want the points on each street segment that are closest to the beltline.
street_points <- street_segments %>%
st_line_sample(density = 1/10) %>%
st_as_sf() %>%
st_cast(to = "POINT")
View(street_points)
street_points <- street_segments %>%
st_line_sample(density = 1/10)
View(street_points)
street_points <- street_segments %>%
st_line_sample(density = 1/10) %>%
st_as_sf()
View(street_points)
?st_line_sample
#Now we want the points on each street segment that are closest to the beltline.
street_points <- street_segments %>%
#Breakup lines into segments
st_line_sample(density = 1/10) %>%
st_as_sf() %>%
#Convert to points
st_cast(to = "POINT") %>%
#Reappend OSM IDs
st_join(street_segments, st_intersects)
View(street_points)
#Now we want the points on each street segment that are closest to the beltline.
street_points <- street_segments %>%
#Breakup lines into segments
st_line_sample(density = 1/10) %>%
st_as_sf() %>%
#Convert to points
st_cast(to = "POINT") %>%
#Reappend OSM IDs
st_join(street_segments %>% st_buffer(set_units(1,'meter')), st_intersects)
View(street_points)
#Now we want the points on each street segment that are closest to the beltline.
street_points <- street_segments %>%
#Breakup lines into segments
st_line_sample(density = 1/10) %>%
st_as_sf() %>%
#Convert to points
st_cast(to = "POINT") %>%
#Reappend OSM IDs
st_join(street_segments %>% st_buffer(set_units(10,'meter')), st_intersects)
#Now we want the points on each street segment that are closest to the beltline.
street_points <- street_segments %>%
#Breakup lines into segments
st_line_sample(density = 1/10) %>%
st_as_sf() %>%
#Convert to points
st_cast(to = "POINT") %>%
#Reappend OSM IDs
st_join(street_segments %>% st_buffer(set_units(5,'meter')), st_intersects)
#Now we want the points on each street segment that are closest to the beltline.
street_points <- street_segments %>%
#Breakup lines into segments
st_line_sample(density = 1/10) %>%
st_as_sf() %>%
#Convert to points
st_cast(to = "POINT") %>%
#Reappend OSM IDs
st_join(street_segments %>% st_buffer(set_units(2,'meter')), st_intersects)
street_points <- street_segments %>%
#Breakup lines into segments
st_line_sample(density = 1/10) %>%
st_as_sf() %>%
#Convert to points
st_cast(to = "POINT")
View(street_segments)
View(street_edges)
#Get the street SF object
osm_streets <- osm_raw$osm_lines %>%
st_transform(epsg_id) %>%
filter(!is.na(osmid))
View(osm_streets)
#Get the street SF object
osm_streets <- osm_raw$osm_lines %>%
st_transform(epsg_id) %>%
filter(!is.na(osm_id))
#Get the street SF object
osm_streets <- osm_raw$osm_lines %>%
st_transform(epsg_id) %>%
filter(!is.na(osm_id))
View(osm_streets)
#Now we want the points on each street segment that are closest to the beltline.
street_points <- street_segments %>%
#Breakup lines into segments
st_line_sample(density = 1/10) %>%
st_as_sf() %>%
#Convert to points
st_cast(to = "POINT") %>%
#Reappend OSM IDs
st_join(street_segments %>% st_buffer(set_units(1,'meter')), st_intersects)
View(street_points)
#Establish a buffer length for analysis
buffer <- set_units(20, 'meters')
#Set bounding box of the search area
bl_bbox <- st_bbox(beltline %>%
st_buffer(dist = set_units(1, 'mile')) %>%
st_transform(crs = 4326))
#Read in OSM street data for streets within the bounding box
osm_raw <- opq(bbox = bl_bbox) %>%
add_osm_feature(key = 'highway', value = c('motorway', 'trunk', 'primary', 'secondary', 'tertiary', 'unclassified','residential')) %>%
osmdata_sf() %>%
osm_poly2line()
#Get the street SF object
osm_streets <- osm_raw$osm_lines %>%
st_transform(epsg_id) %>%
filter(!is.na(osm_id))
#Convert to SF Network, and clean the edges
street_net <- osm_streets %>%
as_sfnetwork(directed = FALSE)
street_edges <- street_net %>%
activate('edges') %>%
mutate('length' = edge_length()) %>%
filter(!edge_is_multiple()) %>%
filter(!edge_is_loop()) %>%
convert(to_spatial_subdivision) %>%
convert(to_spatial_smooth) %>%
mutate('length' = edge_length() %>% unclass()) %>%
st_as_sf()
#Plot road networks
tmap_mode('view')
tm_shape(street_edges) +
tm_lines() +
tm_shape(beltline) +
tm_lines(col = 'red', lwd = 2) +
tm_layout(main.title = 'BeltLine and Surrounding Streets')
#Now clean the road networks to just those that intersect with the access points
street_segments <- street_edges %>%
select(c(osm_id, geometry)) %>%
st_filter(ap %>% st_buffer(buffer), .predicate = st_intersects)
tmap_mode('plot')
tm_shape(street_segments) +
tm_lines() +
tm_shape(beltline) +
tm_lines(col = 'red', lwd = 2) +
tm_shape(ap) +
tm_dots(size = .05) +
tm_layout(main.title = 'BeltLine Access Point Streets')
#Now we want the points on each street segment that are closest to the beltline.
street_points <- street_segments %>%
#Breakup lines into segments
st_line_sample(density = 1/10) %>%
st_as_sf() %>%
#Convert to points
st_cast(to = "POINT") %>%
#Reappend OSM IDs
st_join(street_segments %>% st_buffer(set_units(1,'meter')), st_intersects)
View(street_points)
View(street_segments)
View(street_edges)
View(osm_streets)
View(street_edges)
street_segments <- osm_streets %>%
select(c(osm_id, geometry)) %>%
st_filter(ap %>% st_buffer(buffer), .predicate = st_intersects)
View(street_segments)
tm_shape(street_segments) +
tm_lines() +
tm_shape(beltline) +
tm_lines(col = 'red', lwd = 2) +
tm_shape(ap) +
tm_dots(size = .05) +
tm_layout(main.title = 'BeltLine Access Point Streets')
#Now we want the points on each street segment that are closest to the beltline.
street_points <- street_segments %>%
#Breakup lines into segments
st_line_sample(density = 1/10) %>%
st_as_sf() %>%
#Convert to points
st_cast(to = "POINT") %>%
#Reappend OSM IDs
st_join(street_segments %>% st_buffer(set_units(1,'meter')), st_intersects)
View(street_points)
View(street_points)
View(street_segments)
View(street_points)
#Now clean the road networks to just those that intersect with the access points
street_segments <- osm_streets %>%
select(c(osm_id, geometry)) %>%
st_join(ap %>% st_buffer(buffer), st_intersects)
View(street_segments)
#Now clean the road networks to just those that intersect with the access points
street_segments <- osm_streets %>%
select(c(osm_id, geometry)) %>%
st_join(ap %>% st_buffer(buffer), st_intersects) %>%
filter(!is.na(OBJECTID))
View(street_segments)
#Now we want the points on each street segment that are closest to the beltline.
street_points <- street_segments %>%
#Breakup lines into segments
st_line_sample(density = 1/10) %>%
st_as_sf() %>%
#Convert to points
st_cast(to = "POINT") %>%
#Reappend OSM IDs
st_join(street_segments %>% st_buffer(set_units(1,'meter')), st_intersects)
View(street_points)
?st_intersection
?st_distance
street_nearest_ap %>%
street_points %>%
st_drop_geometry %>%
left_join(ap, by = 'OBJECTID')
#Now we want the points on each street segment that are closest to the beltline.
street_points <- street_segments %>%
#Breakup lines into segments
st_line_sample(density = 1/10) %>%
st_as_sf() %>%
#Convert to points
st_cast(to = "POINT") %>%
#Reappend OSM IDs
st_join(street_segments %>% st_buffer(set_units(1,'meter')), st_intersects)
street_nearest_ap %>%
street_points %>%
st_drop_geometry %>%
left_join(ap, by = 'OBJECTID')
street_nearest_ap <- street_points %>%
st_drop_geometry() %>%
left_join(ap, by = 'OBJECTID')
View(street_nearest_ap)
?st_union
?st_union
#Now unionize these two geometries into a multipoint, then get the distance.
ap_union <- street_points %>%
st_union(street_neareast_ap)
street_nearest_ap <- street_points %>%
st_drop_geometry() %>%
left_join(ap, by = 'OBJECTID')
#Now unionize these two geometries into a multipoint, then get the distance.
ap_union <- street_points %>%
st_union(street_neareast_ap)
street_nearest_ap <- street_points %>%
st_drop_geometry() %>%
left_join(ap, by = 'OBJECTID')
#Now unionize these two geometries into a multipoint, then get the distance.
ap_union <- street_points %>%
st_union(street_nearest_ap)
#Now we want the points on each street segment that are closest to the beltline.
street_points <- street_segments %>%
#Breakup lines into segments
st_line_sample(density = 1/10) %>%
st_as_sf() %>%
#Convert to points
st_cast(to = "POINT") %>%
#Reappend OSM IDs
st_join(street_segments %>% st_buffer(set_units(1,'meter')), st_intersects) %>%
st_transform(epsg_id)
#Now get the nearest access point to each street
street_nearest_ap <- street_points %>%
st_drop_geometry() %>%
left_join(ap, by = 'OBJECTID') %>%
st_transform(epsg_id)
#Now we want the points on each street segment that are closest to the beltline.
street_points <- street_segments %>%
#Breakup lines into segments
st_line_sample(density = 1/10) %>%
st_as_sf() %>%
#Convert to points
st_cast(to = "POINT") %>%
#Reappend OSM IDs
st_join(street_segments %>% st_buffer(set_units(1,'meter')), st_intersects) %>%
st_transform(epsg_id)
#Now get the nearest access point to each street
street_nearest_ap <- street_points %>%
st_drop_geometry() %>%
left_join(ap, by = 'OBJECTID') %>%
st_as_sf() %>%
st_transform(epsg_id)
#Now unionize these two geometries into a multipoint, then get the distance.
ap_union <- street_points %>%
st_union(street_nearest_ap)
